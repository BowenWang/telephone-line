#+Title: Telephone Line
#+Author: Daniel Bordak

[[http://melpa.org/#/telephone-line][file:http://melpa.org/packages/telephone-line-badge.svg]]

[[./screenshots/abs.png]]

[[./screenshots/cubed.png]]

[[./screenshots/gradient.png]]

Telephone Line is a new implementation of Powerline with a few new
features that set it apart from the existing Emacs implementations:
_easier customization_ and _antialiased separators_.

* Installation

The easiest way to install telephone-line is with package.el through
MELPA. Once you have the package installed, initializing it is the
usual stuff:

#+begin_src emacs-lisp
(require 'telephone-line)
(telephone-line-mode 1)
#+end_src

* Configuration

The screenshots above aren't the default configuration; it's all
defined in my dotfiles.

Here's the relevant section:

#+begin_src emacs-lisp
(setq telephone-line-lhs
        '((evil   . (telephone-line-evil-tag-segment))
          (accent . (telephone-line-vc-segment
                     telephone-line-erc-modified-channels-segment
                     telephone-line-process-segment))
          (nil    . (telephone-line-minor-mode-segment
                     telephone-line-buffer-segment))))
(setq telephone-line-rhs
        '((nil    . (telephone-line-misc-info-segment))
          (accent . (telephone-line-major-mode-segment))
          (evil   . (telephone-line-airline-position-segment))))
#+end_src

...That's it. That's essentially all there is to creating a theme.

Now, before you go copy-pasting the above config, it's important to
know that it requires both evil and erc. If you're not using evil,
though, the defaults should be fine.

* Advanced Customization

** Separators

I mentioned before that the separators are defined in terms of two
functions. Here's the way that works:

Imagine the cross-section of the mode-line as a number line, ranging
from -height/2 to +height/2. The first function is applied across this
number line to get the shape of the separator. Here's the most famous
separator, defined as 2*abs(x).

#+BEGIN_EXAMPLE
    -4 |       *
    -3 |     *
    -2 |   *
    -1 | *
     0 +
     1 | *
     2 |   *
     3 |     *
     4 |       *
#+END_EXAMPLE

There you go -- a separator. However, we still need another piece.
That second function I mentioned determines the fill -- the difference
between a solid separator and a hollow one.

This isn't the sort of function I'd expect to get much customization
out of, but there are 3 included ones. The first makes a hollow
separator, which looks more-or-less like the ASCII art above. The
second provides a fill:

#+BEGIN_EXAMPLE
    -4 |       *
    -3 |     *--
    -2 |   *----
    -1 | *------
     0 +--------
     1 | *------
     2 |   *----
     3 |     *--
     4 |       *
#+END_EXAMPLE

The third one is a special thing that ignores the first function
entirely and just produces the same output regardless of the input.
It's used to make the gradient separator.

Choice of separator can be customized as well, by changing the values
of =telephone-line-{primary,secondary}-{left,right}-separator=. This
should be a function which accepts two faces or colors (if provided
faces, the built-in separators use the background field) and returns a
propertized image. The separators can be defined independently of one
another -- feel free to use a nominally left separator for your rhs,
or mix two different types of separators.

** Unicode Separators

The function for defining separators takes an optional argument for a
character to display when in a terminal. For the abs separator, this
is set to the usual Powerline symbol.

* Separator Types

You probably also noticed from the screenshots that there are in fact
two types of separator on either side of the mode-line. The way this
works involves the lhs/rhs alists.

Basically, lists of segment functions associated to a color symbol are
rendered into a 'supersegment'. Supersegments are separated by primary
separators. Internally, non-nil segment-functions are rendered into
'subsegments'. Subsegments are separated by secondary separators.

Primary separators are static -- the customization I showed will
always produce 4 primary separators. Secondaries depend upon the
subsegments state, so there could be anywhere from 0-3 in my config.

* Package structure

- telephone-line.el: Stuff for setting up the mode-line
- telephone-line-separators.el: Separator definitions
- telephone-line-segments.el: Segment definitions
- telephone-line-utils.el: Functions strictly for defining new
  Separators and Segments

If you just want the separators, you can just require that. It does
depend upon utils, however.
